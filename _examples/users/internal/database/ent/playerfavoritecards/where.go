// Code generated by ent, DO NOT EDIT.

package playerfavoritecards

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEQ(FieldUserID, v))
}

// CardID applies equality check predicate on the "card_id" field. It's identical to CardIDEQ.
func CardID(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEQ(FieldCardID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldContainsFold(FieldUserID, v))
}

// CardIDEQ applies the EQ predicate on the "card_id" field.
func CardIDEQ(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEQ(FieldCardID, v))
}

// CardIDNEQ applies the NEQ predicate on the "card_id" field.
func CardIDNEQ(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldNEQ(FieldCardID, v))
}

// CardIDIn applies the In predicate on the "card_id" field.
func CardIDIn(vs ...string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldIn(FieldCardID, vs...))
}

// CardIDNotIn applies the NotIn predicate on the "card_id" field.
func CardIDNotIn(vs ...string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldNotIn(FieldCardID, vs...))
}

// CardIDGT applies the GT predicate on the "card_id" field.
func CardIDGT(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldGT(FieldCardID, v))
}

// CardIDGTE applies the GTE predicate on the "card_id" field.
func CardIDGTE(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldGTE(FieldCardID, v))
}

// CardIDLT applies the LT predicate on the "card_id" field.
func CardIDLT(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldLT(FieldCardID, v))
}

// CardIDLTE applies the LTE predicate on the "card_id" field.
func CardIDLTE(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldLTE(FieldCardID, v))
}

// CardIDContains applies the Contains predicate on the "card_id" field.
func CardIDContains(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldContains(FieldCardID, v))
}

// CardIDHasPrefix applies the HasPrefix predicate on the "card_id" field.
func CardIDHasPrefix(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldHasPrefix(FieldCardID, v))
}

// CardIDHasSuffix applies the HasSuffix predicate on the "card_id" field.
func CardIDHasSuffix(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldHasSuffix(FieldCardID, v))
}

// CardIDEqualFold applies the EqualFold predicate on the "card_id" field.
func CardIDEqualFold(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldEqualFold(FieldCardID, v))
}

// CardIDContainsFold applies the ContainsFold predicate on the "card_id" field.
func CardIDContainsFold(v string) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.FieldContainsFold(FieldCardID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, CardColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(func(s *sql.Selector) {
		step := newCardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlayerFavoriteCards) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlayerFavoriteCards) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlayerFavoriteCards) predicate.PlayerFavoriteCards {
	return predicate.PlayerFavoriteCards(sql.NotPredicates(p))
}
