// Code generated by ent, DO NOT EDIT.

package light

import (
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Light {
	return predicate.Light(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Light {
	return predicate.Light(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Light {
	return predicate.Light(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Light {
	return predicate.Light(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Light {
	return predicate.Light(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Light {
	return predicate.Light(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Light {
	return predicate.Light(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Light {
	return predicate.Light(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Light {
	return predicate.Light(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Light {
	return predicate.Light(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Light {
	return predicate.Light(sql.FieldContainsFold(FieldID, id))
}

// PrivateField applies equality check predicate on the "private_field" field. It's identical to PrivateFieldEQ.
func PrivateField(v string) predicate.Light {
	return predicate.Light(sql.FieldEQ(FieldPrivateField, v))
}

// PrivateFieldEQ applies the EQ predicate on the "private_field" field.
func PrivateFieldEQ(v string) predicate.Light {
	return predicate.Light(sql.FieldEQ(FieldPrivateField, v))
}

// PrivateFieldNEQ applies the NEQ predicate on the "private_field" field.
func PrivateFieldNEQ(v string) predicate.Light {
	return predicate.Light(sql.FieldNEQ(FieldPrivateField, v))
}

// PrivateFieldIn applies the In predicate on the "private_field" field.
func PrivateFieldIn(vs ...string) predicate.Light {
	return predicate.Light(sql.FieldIn(FieldPrivateField, vs...))
}

// PrivateFieldNotIn applies the NotIn predicate on the "private_field" field.
func PrivateFieldNotIn(vs ...string) predicate.Light {
	return predicate.Light(sql.FieldNotIn(FieldPrivateField, vs...))
}

// PrivateFieldGT applies the GT predicate on the "private_field" field.
func PrivateFieldGT(v string) predicate.Light {
	return predicate.Light(sql.FieldGT(FieldPrivateField, v))
}

// PrivateFieldGTE applies the GTE predicate on the "private_field" field.
func PrivateFieldGTE(v string) predicate.Light {
	return predicate.Light(sql.FieldGTE(FieldPrivateField, v))
}

// PrivateFieldLT applies the LT predicate on the "private_field" field.
func PrivateFieldLT(v string) predicate.Light {
	return predicate.Light(sql.FieldLT(FieldPrivateField, v))
}

// PrivateFieldLTE applies the LTE predicate on the "private_field" field.
func PrivateFieldLTE(v string) predicate.Light {
	return predicate.Light(sql.FieldLTE(FieldPrivateField, v))
}

// PrivateFieldContains applies the Contains predicate on the "private_field" field.
func PrivateFieldContains(v string) predicate.Light {
	return predicate.Light(sql.FieldContains(FieldPrivateField, v))
}

// PrivateFieldHasPrefix applies the HasPrefix predicate on the "private_field" field.
func PrivateFieldHasPrefix(v string) predicate.Light {
	return predicate.Light(sql.FieldHasPrefix(FieldPrivateField, v))
}

// PrivateFieldHasSuffix applies the HasSuffix predicate on the "private_field" field.
func PrivateFieldHasSuffix(v string) predicate.Light {
	return predicate.Light(sql.FieldHasSuffix(FieldPrivateField, v))
}

// PrivateFieldIsNil applies the IsNil predicate on the "private_field" field.
func PrivateFieldIsNil() predicate.Light {
	return predicate.Light(sql.FieldIsNull(FieldPrivateField))
}

// PrivateFieldNotNil applies the NotNil predicate on the "private_field" field.
func PrivateFieldNotNil() predicate.Light {
	return predicate.Light(sql.FieldNotNull(FieldPrivateField))
}

// PrivateFieldEqualFold applies the EqualFold predicate on the "private_field" field.
func PrivateFieldEqualFold(v string) predicate.Light {
	return predicate.Light(sql.FieldEqualFold(FieldPrivateField, v))
}

// PrivateFieldContainsFold applies the ContainsFold predicate on the "private_field" field.
func PrivateFieldContainsFold(v string) predicate.Light {
	return predicate.Light(sql.FieldContainsFold(FieldPrivateField, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Light) predicate.Light {
	return predicate.Light(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Light) predicate.Light {
	return predicate.Light(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Light) predicate.Light {
	return predicate.Light(sql.NotPredicates(p))
}
