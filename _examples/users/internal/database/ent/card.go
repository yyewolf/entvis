// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/card"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/user"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CardQuery when eager-loading is set.
	Edges        CardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CardEdges holds the relations/edges for other nodes in the graph.
type CardEdges struct {
	// OwnedBy holds the value of the owned_by edge.
	OwnedBy *User `json:"owned_by,omitempty"`
	// FavedUsers holds the value of the faved_users edge.
	FavedUsers []*User `json:"faved_users,omitempty"`
	// PlayerFavoriteCards holds the value of the player_favorite_cards edge.
	PlayerFavoriteCards []*PlayerFavoriteCards `json:"player_favorite_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnedByOrErr returns the OwnedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CardEdges) OwnedByOrErr() (*User, error) {
	if e.OwnedBy != nil {
		return e.OwnedBy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owned_by"}
}

// FavedUsersOrErr returns the FavedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) FavedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.FavedUsers, nil
	}
	return nil, &NotLoadedError{edge: "faved_users"}
}

// PlayerFavoriteCardsOrErr returns the PlayerFavoriteCards value or an error if the edge
// was not loaded in eager-loading.
func (e CardEdges) PlayerFavoriteCardsOrErr() ([]*PlayerFavoriteCards, error) {
	if e.loadedTypes[2] {
		return e.PlayerFavoriteCards, nil
	}
	return nil, &NotLoadedError{edge: "player_favorite_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldID, card.FieldUserID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case card.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Card.
// This includes values selected through modifiers, order, etc.
func (c *Card) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwnedBy queries the "owned_by" edge of the Card entity.
func (c *Card) QueryOwnedBy() *UserQuery {
	return NewCardClient(c.config).QueryOwnedBy(c)
}

// QueryFavedUsers queries the "faved_users" edge of the Card entity.
func (c *Card) QueryFavedUsers() *UserQuery {
	return NewCardClient(c.config).QueryFavedUsers(c)
}

// QueryPlayerFavoriteCards queries the "player_favorite_cards" edge of the Card entity.
func (c *Card) QueryPlayerFavoriteCards() *PlayerFavoriteCardsQuery {
	return NewCardClient(c.config).QueryPlayerFavoriteCards(c)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return NewCardClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(c.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card
