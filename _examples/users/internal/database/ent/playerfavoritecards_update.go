// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/card"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/playerfavoritecards"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/user"
)

// PlayerFavoriteCardsUpdate is the builder for updating PlayerFavoriteCards entities.
type PlayerFavoriteCardsUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerFavoriteCardsMutation
}

// Where appends a list predicates to the PlayerFavoriteCardsUpdate builder.
func (pfcu *PlayerFavoriteCardsUpdate) Where(ps ...predicate.PlayerFavoriteCards) *PlayerFavoriteCardsUpdate {
	pfcu.mutation.Where(ps...)
	return pfcu
}

// SetUserID sets the "user_id" field.
func (pfcu *PlayerFavoriteCardsUpdate) SetUserID(s string) *PlayerFavoriteCardsUpdate {
	pfcu.mutation.SetUserID(s)
	return pfcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pfcu *PlayerFavoriteCardsUpdate) SetNillableUserID(s *string) *PlayerFavoriteCardsUpdate {
	if s != nil {
		pfcu.SetUserID(*s)
	}
	return pfcu
}

// SetCardID sets the "card_id" field.
func (pfcu *PlayerFavoriteCardsUpdate) SetCardID(s string) *PlayerFavoriteCardsUpdate {
	pfcu.mutation.SetCardID(s)
	return pfcu
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (pfcu *PlayerFavoriteCardsUpdate) SetNillableCardID(s *string) *PlayerFavoriteCardsUpdate {
	if s != nil {
		pfcu.SetCardID(*s)
	}
	return pfcu
}

// SetUser sets the "user" edge to the User entity.
func (pfcu *PlayerFavoriteCardsUpdate) SetUser(u *User) *PlayerFavoriteCardsUpdate {
	return pfcu.SetUserID(u.ID)
}

// SetCard sets the "card" edge to the Card entity.
func (pfcu *PlayerFavoriteCardsUpdate) SetCard(c *Card) *PlayerFavoriteCardsUpdate {
	return pfcu.SetCardID(c.ID)
}

// Mutation returns the PlayerFavoriteCardsMutation object of the builder.
func (pfcu *PlayerFavoriteCardsUpdate) Mutation() *PlayerFavoriteCardsMutation {
	return pfcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pfcu *PlayerFavoriteCardsUpdate) ClearUser() *PlayerFavoriteCardsUpdate {
	pfcu.mutation.ClearUser()
	return pfcu
}

// ClearCard clears the "card" edge to the Card entity.
func (pfcu *PlayerFavoriteCardsUpdate) ClearCard() *PlayerFavoriteCardsUpdate {
	pfcu.mutation.ClearCard()
	return pfcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfcu *PlayerFavoriteCardsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pfcu.sqlSave, pfcu.mutation, pfcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfcu *PlayerFavoriteCardsUpdate) SaveX(ctx context.Context) int {
	affected, err := pfcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfcu *PlayerFavoriteCardsUpdate) Exec(ctx context.Context) error {
	_, err := pfcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcu *PlayerFavoriteCardsUpdate) ExecX(ctx context.Context) {
	if err := pfcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfcu *PlayerFavoriteCardsUpdate) check() error {
	if pfcu.mutation.UserCleared() && len(pfcu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerFavoriteCards.user"`)
	}
	if pfcu.mutation.CardCleared() && len(pfcu.mutation.CardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerFavoriteCards.card"`)
	}
	return nil
}

func (pfcu *PlayerFavoriteCardsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pfcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerfavoritecards.Table, playerfavoritecards.Columns, sqlgraph.NewFieldSpec(playerfavoritecards.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(playerfavoritecards.FieldCardID, field.TypeString))
	if ps := pfcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pfcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.UserTable,
			Columns: []string{playerfavoritecards.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.UserTable,
			Columns: []string{playerfavoritecards.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcu.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.CardTable,
			Columns: []string{playerfavoritecards.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcu.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.CardTable,
			Columns: []string{playerfavoritecards.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pfcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerfavoritecards.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfcu.mutation.done = true
	return n, nil
}

// PlayerFavoriteCardsUpdateOne is the builder for updating a single PlayerFavoriteCards entity.
type PlayerFavoriteCardsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerFavoriteCardsMutation
}

// SetUserID sets the "user_id" field.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetUserID(s string) *PlayerFavoriteCardsUpdateOne {
	pfcuo.mutation.SetUserID(s)
	return pfcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetNillableUserID(s *string) *PlayerFavoriteCardsUpdateOne {
	if s != nil {
		pfcuo.SetUserID(*s)
	}
	return pfcuo
}

// SetCardID sets the "card_id" field.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetCardID(s string) *PlayerFavoriteCardsUpdateOne {
	pfcuo.mutation.SetCardID(s)
	return pfcuo
}

// SetNillableCardID sets the "card_id" field if the given value is not nil.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetNillableCardID(s *string) *PlayerFavoriteCardsUpdateOne {
	if s != nil {
		pfcuo.SetCardID(*s)
	}
	return pfcuo
}

// SetUser sets the "user" edge to the User entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetUser(u *User) *PlayerFavoriteCardsUpdateOne {
	return pfcuo.SetUserID(u.ID)
}

// SetCard sets the "card" edge to the Card entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SetCard(c *Card) *PlayerFavoriteCardsUpdateOne {
	return pfcuo.SetCardID(c.ID)
}

// Mutation returns the PlayerFavoriteCardsMutation object of the builder.
func (pfcuo *PlayerFavoriteCardsUpdateOne) Mutation() *PlayerFavoriteCardsMutation {
	return pfcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) ClearUser() *PlayerFavoriteCardsUpdateOne {
	pfcuo.mutation.ClearUser()
	return pfcuo
}

// ClearCard clears the "card" edge to the Card entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) ClearCard() *PlayerFavoriteCardsUpdateOne {
	pfcuo.mutation.ClearCard()
	return pfcuo
}

// Where appends a list predicates to the PlayerFavoriteCardsUpdate builder.
func (pfcuo *PlayerFavoriteCardsUpdateOne) Where(ps ...predicate.PlayerFavoriteCards) *PlayerFavoriteCardsUpdateOne {
	pfcuo.mutation.Where(ps...)
	return pfcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfcuo *PlayerFavoriteCardsUpdateOne) Select(field string, fields ...string) *PlayerFavoriteCardsUpdateOne {
	pfcuo.fields = append([]string{field}, fields...)
	return pfcuo
}

// Save executes the query and returns the updated PlayerFavoriteCards entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) Save(ctx context.Context) (*PlayerFavoriteCards, error) {
	return withHooks(ctx, pfcuo.sqlSave, pfcuo.mutation, pfcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfcuo *PlayerFavoriteCardsUpdateOne) SaveX(ctx context.Context) *PlayerFavoriteCards {
	node, err := pfcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfcuo *PlayerFavoriteCardsUpdateOne) Exec(ctx context.Context) error {
	_, err := pfcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcuo *PlayerFavoriteCardsUpdateOne) ExecX(ctx context.Context) {
	if err := pfcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pfcuo *PlayerFavoriteCardsUpdateOne) check() error {
	if pfcuo.mutation.UserCleared() && len(pfcuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerFavoriteCards.user"`)
	}
	if pfcuo.mutation.CardCleared() && len(pfcuo.mutation.CardIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlayerFavoriteCards.card"`)
	}
	return nil
}

func (pfcuo *PlayerFavoriteCardsUpdateOne) sqlSave(ctx context.Context) (_node *PlayerFavoriteCards, err error) {
	if err := pfcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playerfavoritecards.Table, playerfavoritecards.Columns, sqlgraph.NewFieldSpec(playerfavoritecards.FieldUserID, field.TypeString), sqlgraph.NewFieldSpec(playerfavoritecards.FieldCardID, field.TypeString))
	if id, ok := pfcuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "PlayerFavoriteCards.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := pfcuo.mutation.CardID(); !ok {
		return nil, &ValidationError{Name: "card_id", err: errors.New(`ent: missing "PlayerFavoriteCards.card_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := pfcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !playerfavoritecards.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := pfcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pfcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.UserTable,
			Columns: []string{playerfavoritecards.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.UserTable,
			Columns: []string{playerfavoritecards.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pfcuo.mutation.CardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.CardTable,
			Columns: []string{playerfavoritecards.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfcuo.mutation.CardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   playerfavoritecards.CardTable,
			Columns: []string{playerfavoritecards.CardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerFavoriteCards{config: pfcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playerfavoritecards.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfcuo.mutation.done = true
	return _node, nil
}
