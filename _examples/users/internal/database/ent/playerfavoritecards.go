// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/card"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/playerfavoritecards"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/user"
)

// PlayerFavoriteCards is the model entity for the PlayerFavoriteCards schema.
type PlayerFavoriteCards struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// CardID holds the value of the "card_id" field.
	CardID string `json:"card_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerFavoriteCardsQuery when eager-loading is set.
	Edges        PlayerFavoriteCardsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlayerFavoriteCardsEdges holds the relations/edges for other nodes in the graph.
type PlayerFavoriteCardsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Card holds the value of the card edge.
	Card *Card `json:"card,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerFavoriteCardsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CardOrErr returns the Card value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerFavoriteCardsEdges) CardOrErr() (*Card, error) {
	if e.Card != nil {
		return e.Card, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "card"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlayerFavoriteCards) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playerfavoritecards.FieldUserID, playerfavoritecards.FieldCardID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlayerFavoriteCards fields.
func (pfc *PlayerFavoriteCards) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playerfavoritecards.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pfc.UserID = value.String
			}
		case playerfavoritecards.FieldCardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_id", values[i])
			} else if value.Valid {
				pfc.CardID = value.String
			}
		default:
			pfc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlayerFavoriteCards.
// This includes values selected through modifiers, order, etc.
func (pfc *PlayerFavoriteCards) Value(name string) (ent.Value, error) {
	return pfc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PlayerFavoriteCards entity.
func (pfc *PlayerFavoriteCards) QueryUser() *UserQuery {
	return NewPlayerFavoriteCardsClient(pfc.config).QueryUser(pfc)
}

// QueryCard queries the "card" edge of the PlayerFavoriteCards entity.
func (pfc *PlayerFavoriteCards) QueryCard() *CardQuery {
	return NewPlayerFavoriteCardsClient(pfc.config).QueryCard(pfc)
}

// Update returns a builder for updating this PlayerFavoriteCards.
// Note that you need to call PlayerFavoriteCards.Unwrap() before calling this method if this PlayerFavoriteCards
// was returned from a transaction, and the transaction was committed or rolled back.
func (pfc *PlayerFavoriteCards) Update() *PlayerFavoriteCardsUpdateOne {
	return NewPlayerFavoriteCardsClient(pfc.config).UpdateOne(pfc)
}

// Unwrap unwraps the PlayerFavoriteCards entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pfc *PlayerFavoriteCards) Unwrap() *PlayerFavoriteCards {
	_tx, ok := pfc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlayerFavoriteCards is not a transactional entity")
	}
	pfc.config.driver = _tx.drv
	return pfc
}

// String implements the fmt.Stringer.
func (pfc *PlayerFavoriteCards) String() string {
	var builder strings.Builder
	builder.WriteString("PlayerFavoriteCards(")
	builder.WriteString("user_id=")
	builder.WriteString(pfc.UserID)
	builder.WriteString(", ")
	builder.WriteString("card_id=")
	builder.WriteString(pfc.CardID)
	builder.WriteByte(')')
	return builder.String()
}

// PlayerFavoriteCardsSlice is a parsable slice of PlayerFavoriteCards.
type PlayerFavoriteCardsSlice []*PlayerFavoriteCards
