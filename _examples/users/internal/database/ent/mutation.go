// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/card"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/light"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/playerfavoritecards"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCard                = "Card"
	TypeLight               = "Light"
	TypePlayerFavoriteCards = "PlayerFavoriteCards"
	TypeUser                = "User"
)

// CardMutation represents an operation that mutates the Card nodes in the graph.
type CardMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	clearedFields      map[string]struct{}
	owned_by           *string
	clearedowned_by    bool
	faved_users        map[string]struct{}
	removedfaved_users map[string]struct{}
	clearedfaved_users bool
	done               bool
	oldValue           func(context.Context) (*Card, error)
	predicates         []predicate.Card
}

var _ ent.Mutation = (*CardMutation)(nil)

// cardOption allows management of the mutation configuration using functional options.
type cardOption func(*CardMutation)

// newCardMutation creates new mutation for the Card entity.
func newCardMutation(c config, op Op, opts ...cardOption) *CardMutation {
	m := &CardMutation{
		config:        c,
		op:            op,
		typ:           TypeCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCardID sets the ID field of the mutation.
func withCardID(id string) cardOption {
	return func(m *CardMutation) {
		var (
			err   error
			once  sync.Once
			value *Card
		)
		m.oldValue = func(ctx context.Context) (*Card, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Card.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCard sets the old Card of the mutation.
func withCard(node *Card) cardOption {
	return func(m *CardMutation) {
		m.oldValue = func(context.Context) (*Card, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Card entities.
func (m *CardMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CardMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CardMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Card.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *CardMutation) SetUserID(s string) {
	m.owned_by = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CardMutation) UserID() (r string, exists bool) {
	v := m.owned_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Card entity.
// If the Card object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CardMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CardMutation) ResetUserID() {
	m.owned_by = nil
}

// SetOwnedByID sets the "owned_by" edge to the User entity by id.
func (m *CardMutation) SetOwnedByID(id string) {
	m.owned_by = &id
}

// ClearOwnedBy clears the "owned_by" edge to the User entity.
func (m *CardMutation) ClearOwnedBy() {
	m.clearedowned_by = true
	m.clearedFields[card.FieldUserID] = struct{}{}
}

// OwnedByCleared reports if the "owned_by" edge to the User entity was cleared.
func (m *CardMutation) OwnedByCleared() bool {
	return m.clearedowned_by
}

// OwnedByID returns the "owned_by" edge ID in the mutation.
func (m *CardMutation) OwnedByID() (id string, exists bool) {
	if m.owned_by != nil {
		return *m.owned_by, true
	}
	return
}

// OwnedByIDs returns the "owned_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnedByID instead. It exists only for internal usage by the builders.
func (m *CardMutation) OwnedByIDs() (ids []string) {
	if id := m.owned_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnedBy resets all changes to the "owned_by" edge.
func (m *CardMutation) ResetOwnedBy() {
	m.owned_by = nil
	m.clearedowned_by = false
}

// AddFavedUserIDs adds the "faved_users" edge to the User entity by ids.
func (m *CardMutation) AddFavedUserIDs(ids ...string) {
	if m.faved_users == nil {
		m.faved_users = make(map[string]struct{})
	}
	for i := range ids {
		m.faved_users[ids[i]] = struct{}{}
	}
}

// ClearFavedUsers clears the "faved_users" edge to the User entity.
func (m *CardMutation) ClearFavedUsers() {
	m.clearedfaved_users = true
}

// FavedUsersCleared reports if the "faved_users" edge to the User entity was cleared.
func (m *CardMutation) FavedUsersCleared() bool {
	return m.clearedfaved_users
}

// RemoveFavedUserIDs removes the "faved_users" edge to the User entity by IDs.
func (m *CardMutation) RemoveFavedUserIDs(ids ...string) {
	if m.removedfaved_users == nil {
		m.removedfaved_users = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.faved_users, ids[i])
		m.removedfaved_users[ids[i]] = struct{}{}
	}
}

// RemovedFavedUsers returns the removed IDs of the "faved_users" edge to the User entity.
func (m *CardMutation) RemovedFavedUsersIDs() (ids []string) {
	for id := range m.removedfaved_users {
		ids = append(ids, id)
	}
	return
}

// FavedUsersIDs returns the "faved_users" edge IDs in the mutation.
func (m *CardMutation) FavedUsersIDs() (ids []string) {
	for id := range m.faved_users {
		ids = append(ids, id)
	}
	return
}

// ResetFavedUsers resets all changes to the "faved_users" edge.
func (m *CardMutation) ResetFavedUsers() {
	m.faved_users = nil
	m.clearedfaved_users = false
	m.removedfaved_users = nil
}

// Where appends a list predicates to the CardMutation builder.
func (m *CardMutation) Where(ps ...predicate.Card) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Card, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Card).
func (m *CardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CardMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.owned_by != nil {
		fields = append(fields, card.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case card.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case card.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Card field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case card.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Card numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Card nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CardMutation) ResetField(name string) error {
	switch name {
	case card.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Card field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owned_by != nil {
		edges = append(edges, card.EdgeOwnedBy)
	}
	if m.faved_users != nil {
		edges = append(edges, card.EdgeFavedUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case card.EdgeOwnedBy:
		if id := m.owned_by; id != nil {
			return []ent.Value{*id}
		}
	case card.EdgeFavedUsers:
		ids := make([]ent.Value, 0, len(m.faved_users))
		for id := range m.faved_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfaved_users != nil {
		edges = append(edges, card.EdgeFavedUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case card.EdgeFavedUsers:
		ids := make([]ent.Value, 0, len(m.removedfaved_users))
		for id := range m.removedfaved_users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowned_by {
		edges = append(edges, card.EdgeOwnedBy)
	}
	if m.clearedfaved_users {
		edges = append(edges, card.EdgeFavedUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CardMutation) EdgeCleared(name string) bool {
	switch name {
	case card.EdgeOwnedBy:
		return m.clearedowned_by
	case card.EdgeFavedUsers:
		return m.clearedfaved_users
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CardMutation) ClearEdge(name string) error {
	switch name {
	case card.EdgeOwnedBy:
		m.ClearOwnedBy()
		return nil
	}
	return fmt.Errorf("unknown Card unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CardMutation) ResetEdge(name string) error {
	switch name {
	case card.EdgeOwnedBy:
		m.ResetOwnedBy()
		return nil
	case card.EdgeFavedUsers:
		m.ResetFavedUsers()
		return nil
	}
	return fmt.Errorf("unknown Card edge %s", name)
}

// LightMutation represents an operation that mutates the Light nodes in the graph.
type LightMutation struct {
	config
	op            Op
	typ           string
	id            *string
	private_field *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Light, error)
	predicates    []predicate.Light
}

var _ ent.Mutation = (*LightMutation)(nil)

// lightOption allows management of the mutation configuration using functional options.
type lightOption func(*LightMutation)

// newLightMutation creates new mutation for the Light entity.
func newLightMutation(c config, op Op, opts ...lightOption) *LightMutation {
	m := &LightMutation{
		config:        c,
		op:            op,
		typ:           TypeLight,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLightID sets the ID field of the mutation.
func withLightID(id string) lightOption {
	return func(m *LightMutation) {
		var (
			err   error
			once  sync.Once
			value *Light
		)
		m.oldValue = func(ctx context.Context) (*Light, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Light.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLight sets the old Light of the mutation.
func withLight(node *Light) lightOption {
	return func(m *LightMutation) {
		m.oldValue = func(context.Context) (*Light, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LightMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LightMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Light entities.
func (m *LightMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LightMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LightMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Light.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPrivateField sets the "private_field" field.
func (m *LightMutation) SetPrivateField(s string) {
	m.private_field = &s
}

// PrivateField returns the value of the "private_field" field in the mutation.
func (m *LightMutation) PrivateField() (r string, exists bool) {
	v := m.private_field
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateField returns the old "private_field" field's value of the Light entity.
// If the Light object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LightMutation) OldPrivateField(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateField is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateField requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateField: %w", err)
	}
	return oldValue.PrivateField, nil
}

// ClearPrivateField clears the value of the "private_field" field.
func (m *LightMutation) ClearPrivateField() {
	m.private_field = nil
	m.clearedFields[light.FieldPrivateField] = struct{}{}
}

// PrivateFieldCleared returns if the "private_field" field was cleared in this mutation.
func (m *LightMutation) PrivateFieldCleared() bool {
	_, ok := m.clearedFields[light.FieldPrivateField]
	return ok
}

// ResetPrivateField resets all changes to the "private_field" field.
func (m *LightMutation) ResetPrivateField() {
	m.private_field = nil
	delete(m.clearedFields, light.FieldPrivateField)
}

// Where appends a list predicates to the LightMutation builder.
func (m *LightMutation) Where(ps ...predicate.Light) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LightMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LightMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Light, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LightMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LightMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Light).
func (m *LightMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LightMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.private_field != nil {
		fields = append(fields, light.FieldPrivateField)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LightMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case light.FieldPrivateField:
		return m.PrivateField()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LightMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case light.FieldPrivateField:
		return m.OldPrivateField(ctx)
	}
	return nil, fmt.Errorf("unknown Light field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LightMutation) SetField(name string, value ent.Value) error {
	switch name {
	case light.FieldPrivateField:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateField(v)
		return nil
	}
	return fmt.Errorf("unknown Light field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LightMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LightMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LightMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Light numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LightMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(light.FieldPrivateField) {
		fields = append(fields, light.FieldPrivateField)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LightMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LightMutation) ClearField(name string) error {
	switch name {
	case light.FieldPrivateField:
		m.ClearPrivateField()
		return nil
	}
	return fmt.Errorf("unknown Light nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LightMutation) ResetField(name string) error {
	switch name {
	case light.FieldPrivateField:
		m.ResetPrivateField()
		return nil
	}
	return fmt.Errorf("unknown Light field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LightMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LightMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LightMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LightMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LightMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LightMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LightMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Light unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LightMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Light edge %s", name)
}

// PlayerFavoriteCardsMutation represents an operation that mutates the PlayerFavoriteCards nodes in the graph.
type PlayerFavoriteCardsMutation struct {
	config
	op            Op
	typ           string
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	card          *string
	clearedcard   bool
	done          bool
	oldValue      func(context.Context) (*PlayerFavoriteCards, error)
	predicates    []predicate.PlayerFavoriteCards
}

var _ ent.Mutation = (*PlayerFavoriteCardsMutation)(nil)

// playerfavoritecardsOption allows management of the mutation configuration using functional options.
type playerfavoritecardsOption func(*PlayerFavoriteCardsMutation)

// newPlayerFavoriteCardsMutation creates new mutation for the PlayerFavoriteCards entity.
func newPlayerFavoriteCardsMutation(c config, op Op, opts ...playerfavoritecardsOption) *PlayerFavoriteCardsMutation {
	m := &PlayerFavoriteCardsMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerFavoriteCards,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerFavoriteCardsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerFavoriteCardsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *PlayerFavoriteCardsMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *PlayerFavoriteCardsMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *PlayerFavoriteCardsMutation) ResetUserID() {
	m.user = nil
}

// SetCardID sets the "card_id" field.
func (m *PlayerFavoriteCardsMutation) SetCardID(s string) {
	m.card = &s
}

// CardID returns the value of the "card_id" field in the mutation.
func (m *PlayerFavoriteCardsMutation) CardID() (r string, exists bool) {
	v := m.card
	if v == nil {
		return
	}
	return *v, true
}

// ResetCardID resets all changes to the "card_id" field.
func (m *PlayerFavoriteCardsMutation) ResetCardID() {
	m.card = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *PlayerFavoriteCardsMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[playerfavoritecards.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PlayerFavoriteCardsMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PlayerFavoriteCardsMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PlayerFavoriteCardsMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearCard clears the "card" edge to the Card entity.
func (m *PlayerFavoriteCardsMutation) ClearCard() {
	m.clearedcard = true
	m.clearedFields[playerfavoritecards.FieldCardID] = struct{}{}
}

// CardCleared reports if the "card" edge to the Card entity was cleared.
func (m *PlayerFavoriteCardsMutation) CardCleared() bool {
	return m.clearedcard
}

// CardIDs returns the "card" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CardID instead. It exists only for internal usage by the builders.
func (m *PlayerFavoriteCardsMutation) CardIDs() (ids []string) {
	if id := m.card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCard resets all changes to the "card" edge.
func (m *PlayerFavoriteCardsMutation) ResetCard() {
	m.card = nil
	m.clearedcard = false
}

// Where appends a list predicates to the PlayerFavoriteCardsMutation builder.
func (m *PlayerFavoriteCardsMutation) Where(ps ...predicate.PlayerFavoriteCards) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerFavoriteCardsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerFavoriteCardsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PlayerFavoriteCards, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerFavoriteCardsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerFavoriteCardsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PlayerFavoriteCards).
func (m *PlayerFavoriteCardsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerFavoriteCardsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user != nil {
		fields = append(fields, playerfavoritecards.FieldUserID)
	}
	if m.card != nil {
		fields = append(fields, playerfavoritecards.FieldCardID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerFavoriteCardsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playerfavoritecards.FieldUserID:
		return m.UserID()
	case playerfavoritecards.FieldCardID:
		return m.CardID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerFavoriteCardsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema PlayerFavoriteCards does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerFavoriteCardsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playerfavoritecards.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case playerfavoritecards.FieldCardID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardID(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerFavoriteCards field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerFavoriteCardsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerFavoriteCardsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerFavoriteCardsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerFavoriteCards numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerFavoriteCardsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerFavoriteCardsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerFavoriteCardsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlayerFavoriteCards nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerFavoriteCardsMutation) ResetField(name string) error {
	switch name {
	case playerfavoritecards.FieldUserID:
		m.ResetUserID()
		return nil
	case playerfavoritecards.FieldCardID:
		m.ResetCardID()
		return nil
	}
	return fmt.Errorf("unknown PlayerFavoriteCards field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerFavoriteCardsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, playerfavoritecards.EdgeUser)
	}
	if m.card != nil {
		edges = append(edges, playerfavoritecards.EdgeCard)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerFavoriteCardsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playerfavoritecards.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case playerfavoritecards.EdgeCard:
		if id := m.card; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerFavoriteCardsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerFavoriteCardsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerFavoriteCardsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, playerfavoritecards.EdgeUser)
	}
	if m.clearedcard {
		edges = append(edges, playerfavoritecards.EdgeCard)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerFavoriteCardsMutation) EdgeCleared(name string) bool {
	switch name {
	case playerfavoritecards.EdgeUser:
		return m.cleareduser
	case playerfavoritecards.EdgeCard:
		return m.clearedcard
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerFavoriteCardsMutation) ClearEdge(name string) error {
	switch name {
	case playerfavoritecards.EdgeUser:
		m.ClearUser()
		return nil
	case playerfavoritecards.EdgeCard:
		m.ClearCard()
		return nil
	}
	return fmt.Errorf("unknown PlayerFavoriteCards unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerFavoriteCardsMutation) ResetEdge(name string) error {
	switch name {
	case playerfavoritecards.EdgeUser:
		m.ResetUser()
		return nil
	case playerfavoritecards.EdgeCard:
		m.ResetCard()
		return nil
	}
	return fmt.Errorf("unknown PlayerFavoriteCards edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	clearedFields         map[string]struct{}
	cards                 map[string]struct{}
	removedcards          map[string]struct{}
	clearedcards          bool
	favorite_cards        map[string]struct{}
	removedfavorite_cards map[string]struct{}
	clearedfavorite_cards bool
	selected_card         *string
	clearedselected_card  bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSelectedCardID sets the "selected_card_id" field.
func (m *UserMutation) SetSelectedCardID(s string) {
	m.selected_card = &s
}

// SelectedCardID returns the value of the "selected_card_id" field in the mutation.
func (m *UserMutation) SelectedCardID() (r string, exists bool) {
	v := m.selected_card
	if v == nil {
		return
	}
	return *v, true
}

// OldSelectedCardID returns the old "selected_card_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSelectedCardID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelectedCardID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelectedCardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelectedCardID: %w", err)
	}
	return oldValue.SelectedCardID, nil
}

// ClearSelectedCardID clears the value of the "selected_card_id" field.
func (m *UserMutation) ClearSelectedCardID() {
	m.selected_card = nil
	m.clearedFields[user.FieldSelectedCardID] = struct{}{}
}

// SelectedCardIDCleared returns if the "selected_card_id" field was cleared in this mutation.
func (m *UserMutation) SelectedCardIDCleared() bool {
	_, ok := m.clearedFields[user.FieldSelectedCardID]
	return ok
}

// ResetSelectedCardID resets all changes to the "selected_card_id" field.
func (m *UserMutation) ResetSelectedCardID() {
	m.selected_card = nil
	delete(m.clearedFields, user.FieldSelectedCardID)
}

// AddCardIDs adds the "cards" edge to the Card entity by ids.
func (m *UserMutation) AddCardIDs(ids ...string) {
	if m.cards == nil {
		m.cards = make(map[string]struct{})
	}
	for i := range ids {
		m.cards[ids[i]] = struct{}{}
	}
}

// ClearCards clears the "cards" edge to the Card entity.
func (m *UserMutation) ClearCards() {
	m.clearedcards = true
}

// CardsCleared reports if the "cards" edge to the Card entity was cleared.
func (m *UserMutation) CardsCleared() bool {
	return m.clearedcards
}

// RemoveCardIDs removes the "cards" edge to the Card entity by IDs.
func (m *UserMutation) RemoveCardIDs(ids ...string) {
	if m.removedcards == nil {
		m.removedcards = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.cards, ids[i])
		m.removedcards[ids[i]] = struct{}{}
	}
}

// RemovedCards returns the removed IDs of the "cards" edge to the Card entity.
func (m *UserMutation) RemovedCardsIDs() (ids []string) {
	for id := range m.removedcards {
		ids = append(ids, id)
	}
	return
}

// CardsIDs returns the "cards" edge IDs in the mutation.
func (m *UserMutation) CardsIDs() (ids []string) {
	for id := range m.cards {
		ids = append(ids, id)
	}
	return
}

// ResetCards resets all changes to the "cards" edge.
func (m *UserMutation) ResetCards() {
	m.cards = nil
	m.clearedcards = false
	m.removedcards = nil
}

// AddFavoriteCardIDs adds the "favorite_cards" edge to the Card entity by ids.
func (m *UserMutation) AddFavoriteCardIDs(ids ...string) {
	if m.favorite_cards == nil {
		m.favorite_cards = make(map[string]struct{})
	}
	for i := range ids {
		m.favorite_cards[ids[i]] = struct{}{}
	}
}

// ClearFavoriteCards clears the "favorite_cards" edge to the Card entity.
func (m *UserMutation) ClearFavoriteCards() {
	m.clearedfavorite_cards = true
}

// FavoriteCardsCleared reports if the "favorite_cards" edge to the Card entity was cleared.
func (m *UserMutation) FavoriteCardsCleared() bool {
	return m.clearedfavorite_cards
}

// RemoveFavoriteCardIDs removes the "favorite_cards" edge to the Card entity by IDs.
func (m *UserMutation) RemoveFavoriteCardIDs(ids ...string) {
	if m.removedfavorite_cards == nil {
		m.removedfavorite_cards = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.favorite_cards, ids[i])
		m.removedfavorite_cards[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteCards returns the removed IDs of the "favorite_cards" edge to the Card entity.
func (m *UserMutation) RemovedFavoriteCardsIDs() (ids []string) {
	for id := range m.removedfavorite_cards {
		ids = append(ids, id)
	}
	return
}

// FavoriteCardsIDs returns the "favorite_cards" edge IDs in the mutation.
func (m *UserMutation) FavoriteCardsIDs() (ids []string) {
	for id := range m.favorite_cards {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteCards resets all changes to the "favorite_cards" edge.
func (m *UserMutation) ResetFavoriteCards() {
	m.favorite_cards = nil
	m.clearedfavorite_cards = false
	m.removedfavorite_cards = nil
}

// ClearSelectedCard clears the "selected_card" edge to the Card entity.
func (m *UserMutation) ClearSelectedCard() {
	m.clearedselected_card = true
	m.clearedFields[user.FieldSelectedCardID] = struct{}{}
}

// SelectedCardCleared reports if the "selected_card" edge to the Card entity was cleared.
func (m *UserMutation) SelectedCardCleared() bool {
	return m.SelectedCardIDCleared() || m.clearedselected_card
}

// SelectedCardIDs returns the "selected_card" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SelectedCardID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SelectedCardIDs() (ids []string) {
	if id := m.selected_card; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSelectedCard resets all changes to the "selected_card" edge.
func (m *UserMutation) ResetSelectedCard() {
	m.selected_card = nil
	m.clearedselected_card = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.selected_card != nil {
		fields = append(fields, user.FieldSelectedCardID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSelectedCardID:
		return m.SelectedCardID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldSelectedCardID:
		return m.OldSelectedCardID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldSelectedCardID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelectedCardID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldSelectedCardID) {
		fields = append(fields, user.FieldSelectedCardID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldSelectedCardID:
		m.ClearSelectedCardID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldSelectedCardID:
		m.ResetSelectedCardID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cards != nil {
		edges = append(edges, user.EdgeCards)
	}
	if m.favorite_cards != nil {
		edges = append(edges, user.EdgeFavoriteCards)
	}
	if m.selected_card != nil {
		edges = append(edges, user.EdgeSelectedCard)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCards:
		ids := make([]ent.Value, 0, len(m.cards))
		for id := range m.cards {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteCards:
		ids := make([]ent.Value, 0, len(m.favorite_cards))
		for id := range m.favorite_cards {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSelectedCard:
		if id := m.selected_card; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcards != nil {
		edges = append(edges, user.EdgeCards)
	}
	if m.removedfavorite_cards != nil {
		edges = append(edges, user.EdgeFavoriteCards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCards:
		ids := make([]ent.Value, 0, len(m.removedcards))
		for id := range m.removedcards {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteCards:
		ids := make([]ent.Value, 0, len(m.removedfavorite_cards))
		for id := range m.removedfavorite_cards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcards {
		edges = append(edges, user.EdgeCards)
	}
	if m.clearedfavorite_cards {
		edges = append(edges, user.EdgeFavoriteCards)
	}
	if m.clearedselected_card {
		edges = append(edges, user.EdgeSelectedCard)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCards:
		return m.clearedcards
	case user.EdgeFavoriteCards:
		return m.clearedfavorite_cards
	case user.EdgeSelectedCard:
		return m.clearedselected_card
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSelectedCard:
		m.ClearSelectedCard()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCards:
		m.ResetCards()
		return nil
	case user.EdgeFavoriteCards:
		m.ResetFavoriteCards()
		return nil
	case user.EdgeSelectedCard:
		m.ResetSelectedCard()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
