// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/light"
)

// Light is the model entity for the Light schema.
type Light struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PrivateField holds the value of the "private_field" field.
	PrivateField string `json:"private_field,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Light) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case light.FieldID, light.FieldPrivateField:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Light fields.
func (l *Light) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case light.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case light.FieldPrivateField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_field", values[i])
			} else if value.Valid {
				l.PrivateField = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Light.
// This includes values selected through modifiers, order, etc.
func (l *Light) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// Update returns a builder for updating this Light.
// Note that you need to call Light.Unwrap() before calling this method if this Light
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Light) Update() *LightUpdateOne {
	return NewLightClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Light entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Light) Unwrap() *Light {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Light is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Light) String() string {
	var builder strings.Builder
	builder.WriteString("Light(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("private_field=")
	builder.WriteString(l.PrivateField)
	builder.WriteByte(')')
	return builder.String()
}

// Lights is a parsable slice of Light.
type Lights []*Light
