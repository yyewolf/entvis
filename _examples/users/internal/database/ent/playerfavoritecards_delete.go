// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/playerfavoritecards"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
)

// PlayerFavoriteCardsDelete is the builder for deleting a PlayerFavoriteCards entity.
type PlayerFavoriteCardsDelete struct {
	config
	hooks    []Hook
	mutation *PlayerFavoriteCardsMutation
}

// Where appends a list predicates to the PlayerFavoriteCardsDelete builder.
func (pfcd *PlayerFavoriteCardsDelete) Where(ps ...predicate.PlayerFavoriteCards) *PlayerFavoriteCardsDelete {
	pfcd.mutation.Where(ps...)
	return pfcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pfcd *PlayerFavoriteCardsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pfcd.sqlExec, pfcd.mutation, pfcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcd *PlayerFavoriteCardsDelete) ExecX(ctx context.Context) int {
	n, err := pfcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pfcd *PlayerFavoriteCardsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(playerfavoritecards.Table, nil)
	if ps := pfcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pfcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pfcd.mutation.done = true
	return affected, err
}

// PlayerFavoriteCardsDeleteOne is the builder for deleting a single PlayerFavoriteCards entity.
type PlayerFavoriteCardsDeleteOne struct {
	pfcd *PlayerFavoriteCardsDelete
}

// Where appends a list predicates to the PlayerFavoriteCardsDelete builder.
func (pfcdo *PlayerFavoriteCardsDeleteOne) Where(ps ...predicate.PlayerFavoriteCards) *PlayerFavoriteCardsDeleteOne {
	pfcdo.pfcd.mutation.Where(ps...)
	return pfcdo
}

// Exec executes the deletion query.
func (pfcdo *PlayerFavoriteCardsDeleteOne) Exec(ctx context.Context) error {
	n, err := pfcdo.pfcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{playerfavoritecards.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcdo *PlayerFavoriteCardsDeleteOne) ExecX(ctx context.Context) {
	if err := pfcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
