// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cards_users_cards",
				Columns:    []*schema.Column{CardsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LightsColumns holds the columns for the "lights" table.
	LightsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "private_field", Type: field.TypeString, Nullable: true},
	}
	// LightsTable holds the schema information for the "lights" table.
	LightsTable = &schema.Table{
		Name:       "lights",
		Columns:    LightsColumns,
		PrimaryKey: []*schema.Column{LightsColumns[0]},
	}
	// PlayerFavoriteCardsColumns holds the columns for the "player_favorite_cards" table.
	PlayerFavoriteCardsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeString},
		{Name: "card_id", Type: field.TypeString},
	}
	// PlayerFavoriteCardsTable holds the schema information for the "player_favorite_cards" table.
	PlayerFavoriteCardsTable = &schema.Table{
		Name:       "player_favorite_cards",
		Columns:    PlayerFavoriteCardsColumns,
		PrimaryKey: []*schema.Column{PlayerFavoriteCardsColumns[0], PlayerFavoriteCardsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "player_favorite_cards_users_user",
				Columns:    []*schema.Column{PlayerFavoriteCardsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "player_favorite_cards_cards_card",
				Columns:    []*schema.Column{PlayerFavoriteCardsColumns[1]},
				RefColumns: []*schema.Column{CardsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "playerfavoritecards_card_id",
				Unique:  true,
				Columns: []*schema.Column{PlayerFavoriteCardsColumns[1]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "selected_card_id", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_cards_selected_card",
				Columns:    []*schema.Column{UsersColumns[1]},
				RefColumns: []*schema.Column{CardsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CardsTable,
		LightsTable,
		PlayerFavoriteCardsTable,
		UsersTable,
	}
)

func init() {
	CardsTable.ForeignKeys[0].RefTable = UsersTable
	PlayerFavoriteCardsTable.ForeignKeys[0].RefTable = UsersTable
	PlayerFavoriteCardsTable.ForeignKeys[1].RefTable = CardsTable
	UsersTable.ForeignKeys[0].RefTable = CardsTable
}
