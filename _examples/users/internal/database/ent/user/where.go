// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// SelectedCardID applies equality check predicate on the "selected_card_id" field. It's identical to SelectedCardIDEQ.
func SelectedCardID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSelectedCardID, v))
}

// SelectedCardIDEQ applies the EQ predicate on the "selected_card_id" field.
func SelectedCardIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSelectedCardID, v))
}

// SelectedCardIDNEQ applies the NEQ predicate on the "selected_card_id" field.
func SelectedCardIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSelectedCardID, v))
}

// SelectedCardIDIn applies the In predicate on the "selected_card_id" field.
func SelectedCardIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSelectedCardID, vs...))
}

// SelectedCardIDNotIn applies the NotIn predicate on the "selected_card_id" field.
func SelectedCardIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSelectedCardID, vs...))
}

// SelectedCardIDGT applies the GT predicate on the "selected_card_id" field.
func SelectedCardIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSelectedCardID, v))
}

// SelectedCardIDGTE applies the GTE predicate on the "selected_card_id" field.
func SelectedCardIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSelectedCardID, v))
}

// SelectedCardIDLT applies the LT predicate on the "selected_card_id" field.
func SelectedCardIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSelectedCardID, v))
}

// SelectedCardIDLTE applies the LTE predicate on the "selected_card_id" field.
func SelectedCardIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSelectedCardID, v))
}

// SelectedCardIDContains applies the Contains predicate on the "selected_card_id" field.
func SelectedCardIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSelectedCardID, v))
}

// SelectedCardIDHasPrefix applies the HasPrefix predicate on the "selected_card_id" field.
func SelectedCardIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSelectedCardID, v))
}

// SelectedCardIDHasSuffix applies the HasSuffix predicate on the "selected_card_id" field.
func SelectedCardIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSelectedCardID, v))
}

// SelectedCardIDIsNil applies the IsNil predicate on the "selected_card_id" field.
func SelectedCardIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSelectedCardID))
}

// SelectedCardIDNotNil applies the NotNil predicate on the "selected_card_id" field.
func SelectedCardIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSelectedCardID))
}

// SelectedCardIDEqualFold applies the EqualFold predicate on the "selected_card_id" field.
func SelectedCardIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSelectedCardID, v))
}

// SelectedCardIDContainsFold applies the ContainsFold predicate on the "selected_card_id" field.
func SelectedCardIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSelectedCardID, v))
}

// HasCards applies the HasEdge predicate on the "cards" edge.
func HasCards() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardsWith applies the HasEdge predicate on the "cards" edge with a given conditions (other predicates).
func HasCardsWith(preds ...predicate.Card) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFavoriteCards applies the HasEdge predicate on the "favorite_cards" edge.
func HasFavoriteCards() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FavoriteCardsTable, FavoriteCardsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFavoriteCardsWith applies the HasEdge predicate on the "favorite_cards" edge with a given conditions (other predicates).
func HasFavoriteCardsWith(preds ...predicate.Card) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFavoriteCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSelectedCard applies the HasEdge predicate on the "selected_card" edge.
func HasSelectedCard() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SelectedCardTable, SelectedCardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedCardWith applies the HasEdge predicate on the "selected_card" edge with a given conditions (other predicates).
func HasSelectedCardWith(preds ...predicate.Card) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSelectedCardStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlayerFavoriteCards applies the HasEdge predicate on the "player_favorite_cards" edge.
func HasPlayerFavoriteCards() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, PlayerFavoriteCardsTable, PlayerFavoriteCardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayerFavoriteCardsWith applies the HasEdge predicate on the "player_favorite_cards" edge with a given conditions (other predicates).
func HasPlayerFavoriteCardsWith(preds ...predicate.PlayerFavoriteCards) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPlayerFavoriteCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
