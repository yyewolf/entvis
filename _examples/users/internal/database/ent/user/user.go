// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSelectedCardID holds the string denoting the selected_card_id field in the database.
	FieldSelectedCardID = "selected_card_id"
	// EdgeCards holds the string denoting the cards edge name in mutations.
	EdgeCards = "cards"
	// EdgeFavoriteCards holds the string denoting the favorite_cards edge name in mutations.
	EdgeFavoriteCards = "favorite_cards"
	// EdgeSelectedCard holds the string denoting the selected_card edge name in mutations.
	EdgeSelectedCard = "selected_card"
	// EdgePlayerFavoriteCards holds the string denoting the player_favorite_cards edge name in mutations.
	EdgePlayerFavoriteCards = "player_favorite_cards"
	// Table holds the table name of the user in the database.
	Table = "users"
	// CardsTable is the table that holds the cards relation/edge.
	CardsTable = "cards"
	// CardsInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardsInverseTable = "cards"
	// CardsColumn is the table column denoting the cards relation/edge.
	CardsColumn = "user_id"
	// FavoriteCardsTable is the table that holds the favorite_cards relation/edge. The primary key declared below.
	FavoriteCardsTable = "player_favorite_cards"
	// FavoriteCardsInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	FavoriteCardsInverseTable = "cards"
	// SelectedCardTable is the table that holds the selected_card relation/edge.
	SelectedCardTable = "users"
	// SelectedCardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	SelectedCardInverseTable = "cards"
	// SelectedCardColumn is the table column denoting the selected_card relation/edge.
	SelectedCardColumn = "selected_card_id"
	// PlayerFavoriteCardsTable is the table that holds the player_favorite_cards relation/edge.
	PlayerFavoriteCardsTable = "player_favorite_cards"
	// PlayerFavoriteCardsInverseTable is the table name for the PlayerFavoriteCards entity.
	// It exists in this package in order to avoid circular dependency with the "playerfavoritecards" package.
	PlayerFavoriteCardsInverseTable = "player_favorite_cards"
	// PlayerFavoriteCardsColumn is the table column denoting the player_favorite_cards relation/edge.
	PlayerFavoriteCardsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldSelectedCardID,
}

var (
	// FavoriteCardsPrimaryKey and FavoriteCardsColumn2 are the table columns denoting the
	// primary key for the favorite_cards relation (M2M).
	FavoriteCardsPrimaryKey = []string{"user_id", "card_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySelectedCardID orders the results by the selected_card_id field.
func BySelectedCardID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedCardID, opts...).ToFunc()
}

// ByCardsCount orders the results by cards count.
func ByCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCardsStep(), opts...)
	}
}

// ByCards orders the results by cards terms.
func ByCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFavoriteCardsCount orders the results by favorite_cards count.
func ByFavoriteCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoriteCardsStep(), opts...)
	}
}

// ByFavoriteCards orders the results by favorite_cards terms.
func ByFavoriteCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoriteCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySelectedCardField orders the results by selected_card field.
func BySelectedCardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedCardStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerFavoriteCardsCount orders the results by player_favorite_cards count.
func ByPlayerFavoriteCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerFavoriteCardsStep(), opts...)
	}
}

// ByPlayerFavoriteCards orders the results by player_favorite_cards terms.
func ByPlayerFavoriteCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerFavoriteCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
	)
}
func newFavoriteCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoriteCardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FavoriteCardsTable, FavoriteCardsPrimaryKey...),
	)
}
func newSelectedCardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedCardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SelectedCardTable, SelectedCardColumn),
	)
}
func newPlayerFavoriteCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerFavoriteCardsInverseTable, PlayerFavoriteCardsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, PlayerFavoriteCardsTable, PlayerFavoriteCardsColumn),
	)
}
