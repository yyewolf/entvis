// Code generated by ent, DO NOT EDIT.

package card

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeOwnedBy holds the string denoting the owned_by edge name in mutations.
	EdgeOwnedBy = "owned_by"
	// EdgeFavedUsers holds the string denoting the faved_users edge name in mutations.
	EdgeFavedUsers = "faved_users"
	// EdgePlayerFavoriteCards holds the string denoting the player_favorite_cards edge name in mutations.
	EdgePlayerFavoriteCards = "player_favorite_cards"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// OwnedByTable is the table that holds the owned_by relation/edge.
	OwnedByTable = "cards"
	// OwnedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnedByInverseTable = "users"
	// OwnedByColumn is the table column denoting the owned_by relation/edge.
	OwnedByColumn = "user_id"
	// FavedUsersTable is the table that holds the faved_users relation/edge. The primary key declared below.
	FavedUsersTable = "player_favorite_cards"
	// FavedUsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FavedUsersInverseTable = "users"
	// PlayerFavoriteCardsTable is the table that holds the player_favorite_cards relation/edge.
	PlayerFavoriteCardsTable = "player_favorite_cards"
	// PlayerFavoriteCardsInverseTable is the table name for the PlayerFavoriteCards entity.
	// It exists in this package in order to avoid circular dependency with the "playerfavoritecards" package.
	PlayerFavoriteCardsInverseTable = "player_favorite_cards"
	// PlayerFavoriteCardsColumn is the table column denoting the player_favorite_cards relation/edge.
	PlayerFavoriteCardsColumn = "card_id"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldUserID,
}

var (
	// FavedUsersPrimaryKey and FavedUsersColumn2 are the table columns denoting the
	// primary key for the faved_users relation (M2M).
	FavedUsersPrimaryKey = []string{"user_id", "card_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Card queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOwnedByField orders the results by owned_by field.
func ByOwnedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByFavedUsersCount orders the results by faved_users count.
func ByFavedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavedUsersStep(), opts...)
	}
}

// ByFavedUsers orders the results by faved_users terms.
func ByFavedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayerFavoriteCardsCount orders the results by player_favorite_cards count.
func ByPlayerFavoriteCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerFavoriteCardsStep(), opts...)
	}
}

// ByPlayerFavoriteCards orders the results by player_favorite_cards terms.
func ByPlayerFavoriteCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerFavoriteCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnedByTable, OwnedByColumn),
	)
}
func newFavedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavedUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, FavedUsersTable, FavedUsersPrimaryKey...),
	)
}
func newPlayerFavoriteCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerFavoriteCardsInverseTable, PlayerFavoriteCardsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, PlayerFavoriteCardsTable, PlayerFavoriteCardsColumn),
	)
}
