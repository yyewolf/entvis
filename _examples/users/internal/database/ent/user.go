// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/card"
	"github.com/yyewolf/entvis/_examples/users/internal/database/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// SelectedCardID holds the value of the "selected_card_id" field.
	SelectedCardID string `json:"selected_card_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cards holds the value of the cards edge.
	Cards []*Card `json:"cards,omitempty"`
	// FavoriteCards holds the value of the favorite_cards edge.
	FavoriteCards []*Card `json:"favorite_cards,omitempty"`
	// SelectedCard holds the value of the selected_card edge.
	SelectedCard *Card `json:"selected_card,omitempty"`
	// PlayerFavoriteCards holds the value of the player_favorite_cards edge.
	PlayerFavoriteCards []*PlayerFavoriteCards `json:"player_favorite_cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CardsOrErr returns the Cards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CardsOrErr() ([]*Card, error) {
	if e.loadedTypes[0] {
		return e.Cards, nil
	}
	return nil, &NotLoadedError{edge: "cards"}
}

// FavoriteCardsOrErr returns the FavoriteCards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FavoriteCardsOrErr() ([]*Card, error) {
	if e.loadedTypes[1] {
		return e.FavoriteCards, nil
	}
	return nil, &NotLoadedError{edge: "favorite_cards"}
}

// SelectedCardOrErr returns the SelectedCard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SelectedCardOrErr() (*Card, error) {
	if e.SelectedCard != nil {
		return e.SelectedCard, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: card.Label}
	}
	return nil, &NotLoadedError{edge: "selected_card"}
}

// PlayerFavoriteCardsOrErr returns the PlayerFavoriteCards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PlayerFavoriteCardsOrErr() ([]*PlayerFavoriteCards, error) {
	if e.loadedTypes[3] {
		return e.PlayerFavoriteCards, nil
	}
	return nil, &NotLoadedError{edge: "player_favorite_cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldSelectedCardID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldSelectedCardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field selected_card_id", values[i])
			} else if value.Valid {
				u.SelectedCardID = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryCards queries the "cards" edge of the User entity.
func (u *User) QueryCards() *CardQuery {
	return NewUserClient(u.config).QueryCards(u)
}

// QueryFavoriteCards queries the "favorite_cards" edge of the User entity.
func (u *User) QueryFavoriteCards() *CardQuery {
	return NewUserClient(u.config).QueryFavoriteCards(u)
}

// QuerySelectedCard queries the "selected_card" edge of the User entity.
func (u *User) QuerySelectedCard() *CardQuery {
	return NewUserClient(u.config).QuerySelectedCard(u)
}

// QueryPlayerFavoriteCards queries the "player_favorite_cards" edge of the User entity.
func (u *User) QueryPlayerFavoriteCards() *PlayerFavoriteCardsQuery {
	return NewUserClient(u.config).QueryPlayerFavoriteCards(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("selected_card_id=")
	builder.WriteString(u.SelectedCardID)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
